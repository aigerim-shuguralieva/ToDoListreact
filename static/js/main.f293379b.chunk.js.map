{"version":3,"sources":["context.js","components/TodoItem/index.jsx","App.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","id","useContext","deleteTodo","completeTodo","className","style","complete","ready","notReady","text","onClick","textDecoration","App","useState","todos","setTodos","inputValue","setInputValue","useEffect","localTodos","JSON","parse","localStorage","getItem","updateLocalToodos","arr","setItem","stringify","Provider","value","splice","placeholder","type","onChange","e","target","map","el","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAEaA,G,MAAUC,IAAMC,iB,OCGhBC,EAAW,SAAC,GAAiB,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GAAQ,EAEAC,qBAAWN,GAAxCO,EAF6B,EAE7BA,WAAYC,EAFiB,EAEjBA,aAExB,OAAO,qBAAKC,UAAU,YAAYC,MAAON,EAAKO,SAAWC,EAAQC,EAA1D,SAEK,sBAAKJ,UAAU,cAAf,UACgB,qBAAKA,UAAU,OAAf,SAAuBL,EAAKU,OACxC,wBAAQC,QAAS,kBAAMP,EAAaH,IAAMI,UAAU,UAApD,SAA+DL,EAAKO,SAAW,WAAa,SAC5F,wBAAQI,QAAS,kBAAMR,EAAWF,IAAKI,UAAU,UAAjD,0BAKVG,EAAQ,CACVI,eAAgB,gBAGdH,EAAW,CACbG,eAAgB,Q,MCnBpB,SAASC,IAAO,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAgBbC,qBAAU,WAER,IAAIC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,UAGjDJ,GAAcJ,EAASI,KACtB,IAEL,IAAMK,EAAoB,SAACC,GACzBH,aAAaI,QAAQ,QAASN,KAAKO,UAAUF,KAe7C,OACE,cAAC9B,EAAQiC,SAAT,CAAkBC,MAAO,CAAE3B,WAPV,SAACF,GACpB,IAAIyB,EAAG,YAAOX,GACdW,EAAIK,OAAO9B,EAAG,GACde,EAASU,GACTD,EAAkBC,IAGuBtB,aAdpB,SAACH,GACpB,IAAIyB,EAAG,YAAOX,GACdW,EAAIzB,GAAIM,UAAYmB,EAAIzB,GAAIM,SAC5BS,EAASU,GACTD,EAAkBC,KAUlB,SACA,sBAAKrB,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,uBACA,gCACE,uBACE2B,YAAY,uBACZC,KAAK,OACLH,MAAOb,EACPiB,SAAU,SAACC,GACTjB,EAAciB,EAAEC,OAAON,UAG3B,wBAAQzB,UAAU,MAAMM,QAjDX,WACjB,IAAIe,EAAG,sBAAOX,GAAP,CAAc,CAAEL,KAAMO,EAAYV,UAAU,KAC/CU,IAEFD,EAASU,GAEXR,EAAc,IAEdK,aAAaI,QAAQ,QAAQN,KAAKO,UAAUF,MAyCxC,oBAEDX,GACCA,EAAMsB,KAAI,SAACC,EAAIrC,GACf,OAAO,cAAC,EAAD,CACND,KAAMsC,EACNrC,GAAIA,GACCA,WC5DdsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f293379b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Context = React.createContext()","import React, {useContext} from 'react'\r\nimport './TodoItem.css'\r\nimport {Context} from '../../context'\r\n\r\n\r\nexport const TodoItem = ({ todo ,id}) => {\r\n   \r\n    const { deleteTodo, completeTodo } = useContext(Context)\r\n\r\nreturn <div className=\"todo-item\" style={todo.complete ? ready : notReady}>\r\n   \r\n            <div className=\"todo-groups\">\r\n                            <div className=\"text\">{todo.text}</div>\r\n                <button onClick={() => completeTodo(id)}  className=\"btn-com\">{todo.complete ? \"good job\" : \"done\"}</button>\r\n                <button onClick={() => deleteTodo(id)} className=\"btn-del\">delete</button>\r\n            </div>\r\n        </div>\r\n}\r\n\r\nconst ready = {\r\n    textDecoration: \"line-through\"\r\n}\r\n\r\nconst notReady = {\r\n    textDecoration: \"none\"\r\n}","import { useState, useEffect } from \"react\";\r\nimport { TodoItem } from \"./components/TodoItem\";\r\nimport \"./App.css\";\r\nimport {Context} from './context'\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  \r\n  const createTodo = () => {\r\n    let arr = [...todos, { text: inputValue, complete: false }]\r\n    if (inputValue){\r\n      //modify todos\r\n      setTodos(arr);\r\n      //clear input\r\n    setInputValue(\"\")\r\n    //save in local storage\r\n    localStorage.setItem(\"todos\",JSON.stringify(arr))\r\n    }  \r\n  };\r\n\r\n  useEffect(() => {\r\n    //getting value of loca;storage\r\n    let localTodos = JSON.parse(localStorage.getItem(\"todos\"))\r\n\r\n    //check for empty of localstorage\r\n    localTodos && setTodos(localTodos)\r\n  }, []);\r\n\r\nconst updateLocalToodos = (arr) => {\r\n  localStorage.setItem(\"todos\", JSON.stringify(arr))\r\n}\r\n  const completeTodo = (id) => {\r\n    let arr = [...todos]\r\n    arr[id].complete = !arr[id].complete\r\n    setTodos(arr)\r\n    updateLocalToodos(arr)\r\n  }\r\n  \r\n  const deleteTodo = (id) => {\r\n  let arr = [...todos];\r\n  arr.splice(id,1)\r\n  setTodos(arr)\r\n  updateLocalToodos(arr)\r\n  }\r\n  return (\r\n    <Context.Provider value={{ deleteTodo, completeTodo }}>\r\n    <div className=\"App\">\r\n      <h2 className=\"title\">ToDo List</h2>\r\n      <div>\r\n        <input\r\n          placeholder=\"Add   text here  ...\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => {\r\n            setInputValue(e.target.value);\r\n          }}\r\n        />\r\n        <button className=\"btn\" onClick={createTodo}>Add</button>\r\n      </div>\r\n      {todos && \r\n        todos.map((el, id) => {\r\n        return <TodoItem \r\n         todo={el} \r\n         id={id} \r\n         key={id} />;\r\n      })}\r\n    </div>\r\n    </Context.Provider>\r\n\r\n  );\r\n}\r\nexport  {App};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}